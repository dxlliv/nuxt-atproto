import { mkdirSync, writeFileSync } from 'node:fs'
import { defineNuxtModule, addPlugin, createResolver, addImportsDir } from '@nuxt/kit'
import type { AtprotoNuxtOptions } from './types'

// Module options TypeScript interface definition
export default defineNuxtModule<AtprotoNuxtOptions>({
  meta: {
    name: 'nuxt-atproto',
    configKey: 'atproto',
  },
  defaults: {
    serviceEndpoint: {
      private: 'https://bsky.social',
      public: 'https://public.api.bsky.app',
    },
    oauth: {
      clientMetadata: {
        // load the client_metadata.json asynchronously from the URL
        remote: '',
        // or use the local client_metadata.json generated by `nuxt-atproto`
        local: {
          client_id: '',
          client_name: '',
          client_uri: '',
          logo_uri: '',
          tos_uri: '',
          policy_uri: '',
          redirect_uris: [],
          scope: 'atproto',
          grant_types: [],
          response_types: [],
          token_endpoint_auth_method: 'none',
          application_type: 'web',
          dpop_bound_access_tokens: true,
        },
      },
      signInOptions: {
        state: '',
        prompt: 'login',
        scope: 'atproto',
        ui_locales: 'en',
      },
    },
    debug: true,
  },
  setup(_options, _nuxt) {
    const { resolve } = createResolver(import.meta.url)

    const publicDir = resolve(_nuxt.options.rootDir, 'public')

    _nuxt.options.runtimeConfig.public.atproto = _options

    _nuxt.options.build.transpile = _nuxt.options.build.transpile || []
    _nuxt.options.build.transpile.push('@atproto/oauth-client-browser')
    _nuxt.options.build.transpile.push('@atproto/api')

    _nuxt.hook('vite:extendConfig', (config) => {
      config.optimizeDeps = config.optimizeDeps || {}
      config.optimizeDeps.include = config.optimizeDeps.include || []
      config.optimizeDeps.include.push('@atproto/oauth-client-browser')
      config.optimizeDeps.include.push('@atproto/api')
    })

    // generate /public/client-metadata.json when options.oauth.clientMetadata.remote is defined

    try {
      mkdirSync(publicDir, { recursive: true })
    }
    catch (error: any) {
      console.error('Failed creating /public/client-metadata.json', error)
      return
    }

    writeFileSync(
      publicDir + '/client-metadata.json',
      JSON.stringify(_options.oauth.clientMetadata.local, null, 2),
    )

    // add plugin

    addImportsDir(resolve('./runtime/composables'))
    addImportsDir(resolve('./runtime/utils'))
    addPlugin(resolve('./runtime/plugin'))
  },
})
